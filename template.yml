AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  SendTweet:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          TWITTER_CONSUMER_KEY: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_CONSUMER_KEY}}'
          TWITTER_CONSUMER_SECRET: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_CONSUMER_SECRET}}'
          TWITTER_ACCESS_KEY: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_ACCESS_KEY}}'
          TWITTER_ACCESS_SECRET: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_ACCESS_SECRET}}'
          RANDOM_ORG_KEY: '{{resolve:secretsmanager:OtherCreds:SecretString:RANDOM_ORG_KEY}}'
      Handler: twitter.textHandler
      Runtime: nodejs12.x
      Role: arn:aws:iam::435716529842:role/LambdaReadOnly

  TweetEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 18,6 * * ? *)
      State: 'DISABLED'
      Targets:
        - Arn:
            Fn::GetAtt:
              - 'SendTweet'
              - 'Arn'
          Id: 'TargetFunctionV1'

  TweetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: 'SendTweet'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'TweetEvent'
          - 'Arn'

  SendImageTweet:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          TWITTER_CONSUMER_KEY: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_CONSUMER_KEY}}'
          TWITTER_CONSUMER_SECRET: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_CONSUMER_SECRET}}'
          TWITTER_ACCESS_KEY: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_ACCESS_KEY}}'
          TWITTER_ACCESS_SECRET: '{{resolve:secretsmanager:TwitterCreds:SecretString:TWITTER_ACCESS_SECRET}}'
          RANDOM_ORG_KEY: '{{resolve:secretsmanager:OtherCreds:SecretString:RANDOM_ORG_KEY}}'
      Handler: twitter.imageHandler
      Runtime: nodejs12.x
      Timeout: 60
      Role: arn:aws:iam::435716529842:role/LambdaReadOnly

  ImageTweetEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 0/6 * * ? *)
      State: 'ENABLED'
      Targets:
        - Arn:
            Fn::GetAtt:
              - 'SendImageTweet'
              - 'Arn'
          Id: 'TargetFunctionV1'

  ImageTweetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: 'SendImageTweet'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'ImageTweetEvent'
          - 'Arn'

  PostToInstagram:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          IG_USERNAME: '{{resolve:secretsmanager:InstagramCreds:SecretString:IG_USERNAME}}'
          IG_PASSWORD: '{{resolve:secretsmanager:InstagramCreds:SecretString:IG_PASSWORD}}'
          RANDOM_ORG_KEY: '{{resolve:secretsmanager:OtherCreds:SecretString:RANDOM_ORG_KEY}}'
      Handler: instagram.handler
      Runtime: nodejs12.x
      Timeout: 60
      Role: arn:aws:iam::435716529842:role/LambdaReadOnly

  InstagramEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 12,20 * * ? *)
      State: 'ENABLED'
      Targets:
        - Arn:
            Fn::GetAtt:
              - 'PostToInstagram'
              - 'Arn'
          Id: 'TargetFunctionV1'

  InstagramPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: 'PostToInstagram'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'InstagramEvent'
          - 'Arn'
